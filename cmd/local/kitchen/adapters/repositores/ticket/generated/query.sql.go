// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getTicket = `-- name: GetTicket :one
SELECT id, uuid, customer_id, status, amount, currency_code, created_at, updated_at FROM kitchen.ticket WHERE uuid = $1
`

func (q *Queries) GetTicket(ctx context.Context, argUuid uuid.UUID) (KitchenTicket, error) {
	row := q.db.QueryRow(ctx, getTicket, argUuid)
	var i KitchenTicket
	err := row.Scan(
		&i.Identifier,
		&i.Uuid,
		&i.CustomerID,
		&i.Status,
		&i.Amount,
		&i.CurrencyCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTicketItems = `-- name: GetTicketItems :many
SELECT uuid, quantity, unit_price FROM kitchen.ticket_items WHERE ticket_id = $1
`

type GetTicketItemsRow struct {
	Uuid      uuid.UUID
	Quantity  int32
	UnitPrice int64
}

func (q *Queries) GetTicketItems(ctx context.Context, ticketID int32) ([]GetTicketItemsRow, error) {
	rows, err := q.db.Query(ctx, getTicketItems, ticketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTicketItemsRow
	for rows.Next() {
		var i GetTicketItemsRow
		if err := rows.Scan(&i.Uuid, &i.Quantity, &i.UnitPrice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTicket = `-- name: InsertTicket :one
INSERT INTO kitchen.ticket 
(uuid, customer_id, status, amount, currency_code, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type InsertTicketParams struct {
	Uuid         uuid.UUID
	CustomerID   uuid.UUID
	Status       string
	Amount       int64
	CurrencyCode string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

func (q *Queries) InsertTicket(ctx context.Context, arg InsertTicketParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertTicket,
		arg.Uuid,
		arg.CustomerID,
		arg.Status,
		arg.Amount,
		arg.CurrencyCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertTicketItem = `-- name: InsertTicketItem :exec
INSERT INTO kitchen.ticket_items (uuid, quantity, unit_price, ticket_id)
VALUES ($1, $2, $3, $4)
`

type InsertTicketItemParams struct {
	Uuid      uuid.UUID
	Quantity  int32
	UnitPrice int64
	TicketID  int32
}

func (q *Queries) InsertTicketItem(ctx context.Context, arg InsertTicketItemParams) error {
	_, err := q.db.Exec(ctx, insertTicketItem,
		arg.Uuid,
		arg.Quantity,
		arg.UnitPrice,
		arg.TicketID,
	)
	return err
}

const updateTicketStatus = `-- name: UpdateTicketStatus :exec
UPDATE kitchen.ticket SET status = $1, updated_at = $2 WHERE uuid = $3
`

type UpdateTicketStatusParams struct {
	Status    string
	UpdatedAt pgtype.Timestamptz
	Uuid      uuid.UUID
}

func (q *Queries) UpdateTicketStatus(ctx context.Context, arg UpdateTicketStatusParams) error {
	_, err := q.db.Exec(ctx, updateTicketStatus, arg.Status, arg.UpdatedAt, arg.Uuid)
	return err
}
