// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getOrder = `-- name: GetOrder :one
SELECT id, uuid, customer_id, amount, currency_code, status, created_at, updated_at
FROM orders.orders WHERE uuid = $1
`

type GetOrderRow struct {
	Identifier   int32
	Uuid         uuid.UUID
	CustomerID   uuid.UUID
	Amount       int64
	CurrencyCode string
	Status       string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

func (q *Queries) GetOrder(ctx context.Context, argUuid uuid.UUID) (GetOrderRow, error) {
	row := q.db.QueryRow(ctx, getOrder, argUuid)
	var i GetOrderRow
	err := row.Scan(
		&i.Identifier,
		&i.Uuid,
		&i.CustomerID,
		&i.Amount,
		&i.CurrencyCode,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT oi.id, oi.uuid, oi.quantity, oi.unit_price, oi.created_at, oi.updated_at, oi.order_id FROM orders.order_items oi
join orders.orders o on o.id  = oi.order_id
where o.uuid = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, argUuid uuid.UUID) ([]OrdersOrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItems, argUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersOrderItem
	for rows.Next() {
		var i OrdersOrderItem
		if err := rows.Scan(
			&i.Identifier,
			&i.Uuid,
			&i.Quantity,
			&i.UnitPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders.orders
	("uuid", customer_id, status, amount, currency_code, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type InsertOrderParams struct {
	Uuid         uuid.UUID
	CustomerID   uuid.UUID
	Status       string
	Amount       int64
	CurrencyCode string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertOrder,
		arg.Uuid,
		arg.CustomerID,
		arg.Status,
		arg.Amount,
		arg.CurrencyCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO orders.order_items
("uuid", quantity, unit_price, order_id, created_at, updated_at)
VALUES($1, $2, $3, $4, now(), now())
`

type InsertOrderItemParams struct {
	Uuid      uuid.UUID
	Quantity  int32
	UnitPrice int64
	OrderID   int32
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem,
		arg.Uuid,
		arg.Quantity,
		arg.UnitPrice,
		arg.OrderID,
	)
	return err
}

const listOrders = `-- name: ListOrders :many
SELECT id, uuid, customer_id, amount, currency_code, status, created_at, updated_at
FROM orders.orders
`

type ListOrdersRow struct {
	Identifier   int32
	Uuid         uuid.UUID
	CustomerID   uuid.UUID
	Amount       int64
	CurrencyCode string
	Status       string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

func (q *Queries) ListOrders(ctx context.Context) ([]ListOrdersRow, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersRow
	for rows.Next() {
		var i ListOrdersRow
		if err := rows.Scan(
			&i.Identifier,
			&i.Uuid,
			&i.CustomerID,
			&i.Amount,
			&i.CurrencyCode,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
